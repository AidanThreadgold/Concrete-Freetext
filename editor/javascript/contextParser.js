contextParser = (function(){
  /* Generated by PEG.js 0.6.1 (http://pegjs.majda.cz/). */
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "Abstract": parse_Abstract,
        "AnyNumber": parse_AnyNumber,
        "AnyWord": parse_AnyWord,
        "Attribute": parse_Attribute,
        "Between": parse_Between,
        "ClassSentence": parse_ClassSentence,
        "Containment": parse_Containment,
        "Cursor": parse_Cursor,
        "Definition": parse_Definition,
        "EntityName": parse_EntityName,
        "EnumerationSentence": parse_EnumerationSentence,
        "EnumerationValues": parse_EnumerationValues,
        "Exact": parse_Exact,
        "Extends": parse_Extends,
        "Feature": parse_Feature,
        "Features": parse_Features,
        "LaxSentence": parse_LaxSentence,
        "LongName": parse_LongName,
        "Multiplicity": parse_Multiplicity,
        "Name": parse_Name,
        "Number": parse_Number,
        "Obligatory": parse_Obligatory,
        "Optional": parse_Optional,
        "Primitive": parse_Primitive,
        "QName": parse_QName,
        "Reference": parse_Reference,
        "Sentence": parse_Sentence,
        "Sentences": parse_Sentences,
        "UnlimitedFrom": parse_UnlimitedFrom,
        "WordOrCursor": parse_WordOrCursor,
        "_": parse__,
        "__": parse___
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "Definition";
      }
      
      var pos = 0;
      var reportMatchFailures = true;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        
        if (charCode <= 0xFF) {
          var escapeChar = 'x';
          var length = 2;
        } else {
          var escapeChar = 'u';
          var length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')            // backslash
          .replace(/"/g, '\\"')              // closing quote character
          .replace(/\r/g, '\\r')             // carriage return
          .replace(/\n/g, '\\n')             // line feed
          .replace(/[\x80-\uFFFF]/g, escape) // non-ASCII characters
          + '"';
      }
      
      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }
        
        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }
        
        rightmostMatchFailuresExpected.push(failure);
      }
      
      function parse_Definition() {
        var cacheKey = 'Definition@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result1 = parse_Sentences();
        var result0 = result1 !== null
          ? (function(s) {var p=[];
          	for (var i=0; i<primitives.length; i++)
          		p.push({"_class": "Datatype", "name": primitives[i]});
          	s = s.concat(p)
          	if (cursor !== undefined) s.push(cursor);
          	return s})(result1)
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Sentences() {
        var cacheKey = 'Sentences@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result3 = parse__();
        if (result3 !== null) {
          var result4 = parse_Sentence();
          if (result4 !== null) {
            var result5 = parse__();
            if (result5 !== null) {
              var result2 = [result3, result4, result5];
            } else {
              var result2 = null;
              pos = savedPos0;
            }
          } else {
            var result2 = null;
            pos = savedPos0;
          }
        } else {
          var result2 = null;
          pos = savedPos0;
        }
        var result1 = result2 !== null
          ? (function(s) {return s})(result2[1])
          : null;
        if (result1 !== null) {
          var result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            var savedPos0 = pos;
            var result3 = parse__();
            if (result3 !== null) {
              var result4 = parse_Sentence();
              if (result4 !== null) {
                var result5 = parse__();
                if (result5 !== null) {
                  var result2 = [result3, result4, result5];
                } else {
                  var result2 = null;
                  pos = savedPos0;
                }
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
            var result1 = result2 !== null
              ? (function(s) {return s})(result2[1])
              : null;
          }
        } else {
          var result0 = null;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Sentence() {
        var cacheKey = 'Sentence@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result3 = parse_EnumerationSentence();
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_ClassSentence();
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_LaxSentence();
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_LaxSentence() {
        var cacheKey = 'LaxSentence@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = (function() {return laxParsing})() ? '' : null;
        if (result2 !== null) {
          var result3 = parse_QName();
          if (result3 !== null) {
            var result4 = [];
            var savedPos1 = pos;
            var result8 = parse___();
            if (result8 !== null) {
              var result9 = parse_WordOrCursor();
              if (result9 !== null) {
                var result7 = [result8, result9];
              } else {
                var result7 = null;
                pos = savedPos1;
              }
            } else {
              var result7 = null;
              pos = savedPos1;
            }
            while (result7 !== null) {
              result4.push(result7);
              var savedPos1 = pos;
              var result8 = parse___();
              if (result8 !== null) {
                var result9 = parse_WordOrCursor();
                if (result9 !== null) {
                  var result7 = [result8, result9];
                } else {
                  var result7 = null;
                  pos = savedPos1;
                }
              } else {
                var result7 = null;
                pos = savedPos1;
              }
            }
            if (result4 !== null) {
              if (input.substr(pos, 1) === ".") {
                var result6 = ".";
                pos += 1;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\".\"");
                }
              }
              var result5 = result6 !== null ? result6 : '';
              if (result5 !== null) {
                var result1 = [result2, result3, result4, result5];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(c) {return {"_class" : "Class", "name" : c}})(result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_WordOrCursor() {
        var cacheKey = 'WordOrCursor@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result2 = parse_Cursor();
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_AnyWord();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Cursor() {
        var cacheKey = 'Cursor@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = (function() {return failOnCursor})() ? null : '';
        if (result2 !== null) {
          var result5 = parse_QName();
          var result3 = result5 !== null ? result5 : '';
          if (result3 !== null) {
            if (input.substr(pos, 1) === "#") {
              var result4 = "#";
              pos += 1;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"#\"");
              }
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(f) {cursor = {"_cursor": f}})(result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_AnyWord() {
        var cacheKey = 'AnyWord@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var savedReportMatchFailuresVar0 = reportMatchFailures;
        reportMatchFailures = false;
        if (input.substr(pos, 1) === ".") {
          var result7 = ".";
          pos += 1;
        } else {
          var result7 = null;
          if (reportMatchFailures) {
            matchFailed("\".\"");
          }
        }
        if (result7 !== null) {
          var result4 = result7;
        } else {
          var result6 = parse___();
          if (result6 !== null) {
            var result4 = result6;
          } else {
            if (input.substr(pos, 1) === "#") {
              var result5 = "#";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"#\"");
              }
            }
            if (result5 !== null) {
              var result4 = result5;
            } else {
              var result4 = null;;
            };
          };
        }
        reportMatchFailures = savedReportMatchFailuresVar0;
        if (result4 === null) {
          var result2 = '';
        } else {
          var result2 = null;
          pos = savedPos1;
        }
        if (result2 !== null) {
          if (input.length > pos) {
            var result3 = input.charAt(pos);
            pos++;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed('any character');
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        if (result1 !== null) {
          var result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            var savedPos0 = pos;
            var savedPos1 = pos;
            var savedReportMatchFailuresVar0 = reportMatchFailures;
            reportMatchFailures = false;
            if (input.substr(pos, 1) === ".") {
              var result7 = ".";
              pos += 1;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("\".\"");
              }
            }
            if (result7 !== null) {
              var result4 = result7;
            } else {
              var result6 = parse___();
              if (result6 !== null) {
                var result4 = result6;
              } else {
                if (input.substr(pos, 1) === "#") {
                  var result5 = "#";
                  pos += 1;
                } else {
                  var result5 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"#\"");
                  }
                }
                if (result5 !== null) {
                  var result4 = result5;
                } else {
                  var result4 = null;;
                };
              };
            }
            reportMatchFailures = savedReportMatchFailuresVar0;
            if (result4 === null) {
              var result2 = '';
            } else {
              var result2 = null;
              pos = savedPos1;
            }
            if (result2 !== null) {
              if (input.length > pos) {
                var result3 = input.charAt(pos);
                pos++;
              } else {
                var result3 = null;
                if (reportMatchFailures) {
                  matchFailed('any character');
                }
              }
              if (result3 !== null) {
                var result1 = [result2, result3];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          }
        } else {
          var result0 = null;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_EnumerationSentence() {
        var cacheKey = 'EnumerationSentence@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse_QName();
        if (result2 !== null) {
          var result3 = parse___();
          if (result3 !== null) {
            if (input.substr(pos, 14) === "is enumeration") {
              var result4 = "is enumeration";
              pos += 14;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"is enumeration\"");
              }
            }
            if (result4 !== null) {
              var result7 = parse_EnumerationValues();
              var result5 = result7 !== null ? result7 : '';
              if (result5 !== null) {
                if (input.substr(pos, 1) === ".") {
                  var result6 = ".";
                  pos += 1;
                } else {
                  var result6 = null;
                  if (reportMatchFailures) {
                    matchFailed("\".\"");
                  }
                }
                if (result6 !== null) {
                  var result1 = [result2, result3, result4, result5, result6];
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(c, e) {s = {"_class": "Enum", "name": c};
          		if (e) s["literals"] = e;
          		return s;})(result1[0], result1[3])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_EnumerationValues() {
        var cacheKey = 'EnumerationValues@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse___();
        if (result2 !== null) {
          if (input.substr(pos, 4) === "with") {
            var result3 = "with";
            pos += 4;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\"with\"");
            }
          }
          if (result3 !== null) {
            var result4 = parse___();
            if (result4 !== null) {
              if (input.substr(pos, 6) === "values") {
                var result5 = "values";
                pos += 6;
              } else {
                var result5 = null;
                if (reportMatchFailures) {
                  matchFailed("\"values\"");
                }
              }
              if (result5 !== null) {
                var result6 = parse___();
                if (result6 !== null) {
                  var result7 = parse_QName();
                  if (result7 !== null) {
                    var result8 = [];
                    var savedPos1 = pos;
                    var result11 = parse__();
                    if (result11 !== null) {
                      if (input.substr(pos, 1) === ",") {
                        var result12 = ",";
                        pos += 1;
                      } else {
                        var result12 = null;
                        if (reportMatchFailures) {
                          matchFailed("\",\"");
                        }
                      }
                      if (result12 !== null) {
                        var result13 = parse__();
                        if (result13 !== null) {
                          var result14 = parse_QName();
                          if (result14 !== null) {
                            var result10 = [result11, result12, result13, result14];
                          } else {
                            var result10 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result10 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result10 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result10 = null;
                      pos = savedPos1;
                    }
                    var result9 = result10 !== null
                      ? (function(q) {return q})(result10[3])
                      : null;
                    while (result9 !== null) {
                      result8.push(result9);
                      var savedPos1 = pos;
                      var result11 = parse__();
                      if (result11 !== null) {
                        if (input.substr(pos, 1) === ",") {
                          var result12 = ",";
                          pos += 1;
                        } else {
                          var result12 = null;
                          if (reportMatchFailures) {
                            matchFailed("\",\"");
                          }
                        }
                        if (result12 !== null) {
                          var result13 = parse__();
                          if (result13 !== null) {
                            var result14 = parse_QName();
                            if (result14 !== null) {
                              var result10 = [result11, result12, result13, result14];
                            } else {
                              var result10 = null;
                              pos = savedPos1;
                            }
                          } else {
                            var result10 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result10 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result10 = null;
                        pos = savedPos1;
                      }
                      var result9 = result10 !== null
                        ? (function(q) {return q})(result10[3])
                        : null;
                    }
                    if (result8 !== null) {
                      var result1 = [result2, result3, result4, result5, result6, result7, result8];
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(f, l) {return [f].concat(l);})(result1[5], result1[6])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ClassSentence() {
        var cacheKey = 'ClassSentence@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse_QName();
        if (result2 !== null) {
          var result9 = parse_Abstract();
          var result3 = result9 !== null ? result9 : '';
          if (result3 !== null) {
            var result8 = parse_Extends();
            var result4 = result8 !== null ? result8 : '';
            if (result4 !== null) {
              var result7 = parse_Features();
              var result5 = result7 !== null ? result7 : '';
              if (result5 !== null) {
                if (input.substr(pos, 1) === ".") {
                  var result6 = ".";
                  pos += 1;
                } else {
                  var result6 = null;
                  if (reportMatchFailures) {
                    matchFailed("\".\"");
                  }
                }
                if (result6 !== null) {
                  var result1 = [result2, result3, result4, result5, result6];
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(c, a, e, f) {var s={"_class" : "Class", "name" : c};
          	if (f) s["features"] = f;
          	if (e) s["superTypes"] = e;
          	if (a) s["abstract"] = true;
          	return s})(result1[0], result1[1], result1[2], result1[3])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Abstract() {
        var cacheKey = 'Abstract@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse___();
        if (result1 !== null) {
          if (input.substr(pos, 11) === "is abstract") {
            var result2 = "is abstract";
            pos += 11;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"is abstract\"");
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Extends() {
        var cacheKey = 'Extends@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse___();
        if (result2 !== null) {
          if (input.substr(pos, 7) === "extends") {
            var result3 = "extends";
            pos += 7;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\"extends\"");
            }
          }
          if (result3 !== null) {
            var result4 = parse___();
            if (result4 !== null) {
              var result5 = parse_EntityName();
              if (result5 !== null) {
                var result1 = [result2, result3, result4, result5];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(e) {return e})(result1[3])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Features() {
        var cacheKey = 'Features@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse___();
        if (result2 !== null) {
          var result3 = parse_Feature();
          if (result3 !== null) {
            var result4 = [];
            var savedPos1 = pos;
            var result7 = parse__();
            if (result7 !== null) {
              if (input.substr(pos, 1) === ",") {
                var result8 = ",";
                pos += 1;
              } else {
                var result8 = null;
                if (reportMatchFailures) {
                  matchFailed("\",\"");
                }
              }
              if (result8 !== null) {
                var result9 = parse__();
                if (result9 !== null) {
                  var result10 = parse_Feature();
                  if (result10 !== null) {
                    var result6 = [result7, result8, result9, result10];
                  } else {
                    var result6 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result6 = null;
                  pos = savedPos1;
                }
              } else {
                var result6 = null;
                pos = savedPos1;
              }
            } else {
              var result6 = null;
              pos = savedPos1;
            }
            var result5 = result6 !== null
              ? (function(f3) {return f3})(result6[3])
              : null;
            while (result5 !== null) {
              result4.push(result5);
              var savedPos1 = pos;
              var result7 = parse__();
              if (result7 !== null) {
                if (input.substr(pos, 1) === ",") {
                  var result8 = ",";
                  pos += 1;
                } else {
                  var result8 = null;
                  if (reportMatchFailures) {
                    matchFailed("\",\"");
                  }
                }
                if (result8 !== null) {
                  var result9 = parse__();
                  if (result9 !== null) {
                    var result10 = parse_Feature();
                    if (result10 !== null) {
                      var result6 = [result7, result8, result9, result10];
                    } else {
                      var result6 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result6 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result6 = null;
                  pos = savedPos1;
                }
              } else {
                var result6 = null;
                pos = savedPos1;
              }
              var result5 = result6 !== null
                ? (function(f3) {return f3})(result6[3])
                : null;
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(f1, f2) {if (f2.length != 0) {
          		var r=[f1];
          		for (var i=0; i<f2.length; i++)
          			{r.push(f2[i])};
          	} else {
          		var r=f1;
          	}
          	return r})(result1[1], result1[2])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Feature() {
        var cacheKey = 'Feature@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result3 = parse_Attribute();
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_Containment();
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_Reference();
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Attribute() {
        var cacheKey = 'Attribute@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 3) === "has") {
          var result2 = "has";
          pos += 3;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"has\"");
          }
        }
        if (result2 !== null) {
          var result3 = parse_Multiplicity();
          if (result3 !== null) {
            var result4 = parse_QName();
            if (result4 !== null) {
              var result5 = parse___();
              if (result5 !== null) {
                if (input.substr(pos, 2) === "as") {
                  var result6 = "as";
                  pos += 2;
                } else {
                  var result6 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"as\"");
                  }
                }
                if (result6 !== null) {
                  var result7 = parse___();
                  if (result7 !== null) {
                    var result8 = parse_Primitive();
                    if (result8 !== null) {
                      var result1 = [result2, result3, result4, result5, result6, result7, result8];
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(feature, n, p) {if ($.inArray(p, primitives)) {primitives.push(p);};
          	feature["kind"] = "attribute";
          	feature["name"] = n;
          	feature["type"] = p;
          	return feature})(result1[1], result1[2], result1[6])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Containment() {
        var cacheKey = 'Containment@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 8) === "contains") {
          var result2 = "contains";
          pos += 8;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"contains\"");
          }
        }
        if (result2 !== null) {
          var result3 = parse_Multiplicity();
          if (result3 !== null) {
            var result4 = parse_QName();
            if (result4 !== null) {
              var result5 = parse___();
              if (result5 !== null) {
                if (input.substr(pos, 2) === "as") {
                  var result6 = "as";
                  pos += 2;
                } else {
                  var result6 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"as\"");
                  }
                }
                if (result6 !== null) {
                  var result7 = parse___();
                  if (result7 !== null) {
                    var result8 = parse_EntityName();
                    if (result8 !== null) {
                      var result1 = [result2, result3, result4, result5, result6, result7, result8];
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(feature, n, e) {feature["kind"] = "containment";
          	feature["name"] = n;
          	feature["type"] = e;
          	return feature})(result1[1], result1[2], result1[6])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Reference() {
        var cacheKey = 'Reference@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 3) === "has") {
          var result2 = "has";
          pos += 3;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"has\"");
          }
        }
        if (result2 !== null) {
          var result3 = parse_Multiplicity();
          if (result3 !== null) {
            var result4 = parse_QName();
            if (result4 !== null) {
              var result5 = parse___();
              if (result5 !== null) {
                if (input.substr(pos, 12) === "referring to") {
                  var result6 = "referring to";
                  pos += 12;
                } else {
                  var result6 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"referring to\"");
                  }
                }
                if (result6 !== null) {
                  var result7 = parse___();
                  if (result7 !== null) {
                    var result8 = parse_EntityName();
                    if (result8 !== null) {
                      var result1 = [result2, result3, result4, result5, result6, result7, result8];
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(feature, n, e) {feature["kind"] = "reference";
          	feature["name"] = n;
          	feature["type"] = e;
          	return feature})(result1[1], result1[2], result1[6])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Multiplicity() {
        var cacheKey = 'Multiplicity@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result6 = parse_AnyNumber();
        if (result6 !== null) {
          var result0 = result6;
        } else {
          var result5 = parse_Between();
          if (result5 !== null) {
            var result0 = result5;
          } else {
            var result4 = parse_Exact();
            if (result4 !== null) {
              var result0 = result4;
            } else {
              var result3 = parse_UnlimitedFrom();
              if (result3 !== null) {
                var result0 = result3;
              } else {
                var result2 = parse_Optional();
                if (result2 !== null) {
                  var result0 = result2;
                } else {
                  var result1 = parse_Obligatory();
                  if (result1 !== null) {
                    var result0 = result1;
                  } else {
                    var result0 = null;;
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_AnyNumber() {
        var cacheKey = 'AnyNumber@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse___();
        if (result2 !== null) {
          if (input.substr(pos, 13) === "any number of") {
            var result3 = "any number of";
            pos += 13;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\"any number of\"");
            }
          }
          if (result3 !== null) {
            var result4 = parse___();
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function() {return {"_class" : "Feature", "lowerLimit" : 0, "upperLimit" : -1}})()
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Between() {
        var cacheKey = 'Between@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse___();
        if (result2 !== null) {
          if (input.substr(pos, 4) === "from") {
            var result3 = "from";
            pos += 4;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\"from\"");
            }
          }
          if (result3 !== null) {
            var result4 = parse___();
            if (result4 !== null) {
              var result5 = parse_Number();
              if (result5 !== null) {
                var result6 = parse___();
                if (result6 !== null) {
                  if (input.substr(pos, 2) === "to") {
                    var result7 = "to";
                    pos += 2;
                  } else {
                    var result7 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"to\"");
                    }
                  }
                  if (result7 !== null) {
                    var result8 = parse___();
                    if (result8 !== null) {
                      var result9 = parse_Number();
                      if (result9 !== null) {
                        var result10 = parse___();
                        if (result10 !== null) {
                          if (input.substr(pos, 2) === "of") {
                            var result11 = "of";
                            pos += 2;
                          } else {
                            var result11 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"of\"");
                            }
                          }
                          if (result11 !== null) {
                            var result12 = parse___();
                            if (result12 !== null) {
                              var result1 = [result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12];
                            } else {
                              var result1 = null;
                              pos = savedPos0;
                            }
                          } else {
                            var result1 = null;
                            pos = savedPos0;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos0;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(f, t) {return {"_class" : "Feature", "lowerLimit" : f, "upperLimit" : t}})(result1[3], result1[7])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Exact() {
        var cacheKey = 'Exact@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse___();
        if (result2 !== null) {
          if (input.substr(pos, 7) === "exactly") {
            var result3 = "exactly";
            pos += 7;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\"exactly\"");
            }
          }
          if (result3 !== null) {
            var result4 = parse___();
            if (result4 !== null) {
              var result5 = parse_Number();
              if (result5 !== null) {
                var result6 = parse___();
                if (result6 !== null) {
                  if (input.substr(pos, 2) === "of") {
                    var result7 = "of";
                    pos += 2;
                  } else {
                    var result7 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"of\"");
                    }
                  }
                  if (result7 !== null) {
                    var result8 = parse___();
                    if (result8 !== null) {
                      var result1 = [result2, result3, result4, result5, result6, result7, result8];
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(n) {return {"_class" : "Feature", "lowerLimit" : n, "upperLimit" : n}})(result1[3])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_UnlimitedFrom() {
        var cacheKey = 'UnlimitedFrom@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse___();
        if (result2 !== null) {
          if (input.substr(pos, 8) === "at least") {
            var result3 = "at least";
            pos += 8;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\"at least\"");
            }
          }
          if (result3 !== null) {
            var result4 = parse___();
            if (result4 !== null) {
              var result5 = parse_Number();
              if (result5 !== null) {
                var result6 = parse___();
                if (result6 !== null) {
                  if (input.substr(pos, 2) === "of") {
                    var result7 = "of";
                    pos += 2;
                  } else {
                    var result7 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"of\"");
                    }
                  }
                  if (result7 !== null) {
                    var result8 = parse___();
                    if (result8 !== null) {
                      var result1 = [result2, result3, result4, result5, result6, result7, result8];
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(f) {return {"_class" : "Feature", "lowerLimit" : f, "upperLimit" : -1}})(result1[3])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Optional() {
        var cacheKey = 'Optional@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse___();
        if (result2 !== null) {
          if (input.substr(pos, 8) === "optional") {
            var result3 = "optional";
            pos += 8;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\"optional\"");
            }
          }
          if (result3 !== null) {
            var result4 = parse___();
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function() {return {"_class" : "Feature", "lowerLimit" : 0, "upperLimit" : 1}})()
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Obligatory() {
        var cacheKey = 'Obligatory@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse___();
        if (result2 !== null) {
          if (input.substr(pos, 10) === "obligatory") {
            var result3 = "obligatory";
            pos += 10;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\"obligatory\"");
            }
          }
          if (result3 !== null) {
            var result4 = parse___();
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function() {return {"_class" : "Feature", "lowerLimit" : 1, "upperLimit" : 1}})()
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Number() {
        var cacheKey = 'Number@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[0-9]/) !== null) {
          var result2 = input.charAt(pos);
          pos++;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("[0-9]");
          }
        }
        if (result2 !== null) {
          var result1 = [];
          while (result2 !== null) {
            result1.push(result2);
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result2 = input.charAt(pos);
              pos++;
            } else {
              var result2 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
          }
        } else {
          var result1 = null;
        }
        var result0 = result1 !== null
          ? (function(n) {return parseInt(n.join(""), 10);})(result1)
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Primitive() {
        var cacheKey = 'Primitive@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 6) === "string") {
          var result5 = "string";
          pos += 6;
        } else {
          var result5 = null;
          if (reportMatchFailures) {
            matchFailed("\"string\"");
          }
        }
        if (result5 !== null) {
          var result1 = result5;
        } else {
          if (input.substr(pos, 7) === "integer") {
            var result4 = "integer";
            pos += 7;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"integer\"");
            }
          }
          if (result4 !== null) {
            var result1 = result4;
          } else {
            if (input.substr(pos, 5) === "float") {
              var result3 = "float";
              pos += 5;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("\"float\"");
              }
            }
            if (result3 !== null) {
              var result1 = result3;
            } else {
              if (input.substr(pos, 7) === "boolean") {
                var result2 = "boolean";
                pos += 7;
              } else {
                var result2 = null;
                if (reportMatchFailures) {
                  matchFailed("\"boolean\"");
                }
              }
              if (result2 !== null) {
                var result1 = result2;
              } else {
                var result1 = null;;
              };
            };
          };
        }
        var result0 = result1 !== null
          ? (function(p) {return p.substr(0,1).toUpperCase()+p.substr(1)})(result1)
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_EntityName() {
        var cacheKey = 'EntityName@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result2 = parse_Name();
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_LongName();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("EntityName");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_QName() {
        var cacheKey = 'QName@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result2 = parse_Name();
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_LongName();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("QName");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_LongName() {
        var cacheKey = 'LongName@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos2 = pos;
        if (input.substr(pos, 1) === "'") {
          var result12 = "'";
          pos += 1;
        } else {
          var result12 = null;
          if (reportMatchFailures) {
            matchFailed("\"'\"");
          }
        }
        if (result12 !== null) {
          var result13 = parse_Name();
          if (result13 !== null) {
            var savedPos3 = pos;
            var result17 = parse___();
            if (result17 !== null) {
              var result18 = parse_Name();
              if (result18 !== null) {
                var result16 = [result17, result18];
              } else {
                var result16 = null;
                pos = savedPos3;
              }
            } else {
              var result16 = null;
              pos = savedPos3;
            }
            if (result16 !== null) {
              var result14 = [];
              while (result16 !== null) {
                result14.push(result16);
                var savedPos3 = pos;
                var result17 = parse___();
                if (result17 !== null) {
                  var result18 = parse_Name();
                  if (result18 !== null) {
                    var result16 = [result17, result18];
                  } else {
                    var result16 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result16 = null;
                  pos = savedPos3;
                }
              }
            } else {
              var result14 = null;
            }
            if (result14 !== null) {
              if (input.substr(pos, 1) === "'") {
                var result15 = "'";
                pos += 1;
              } else {
                var result15 = null;
                if (reportMatchFailures) {
                  matchFailed("\"'\"");
                }
              }
              if (result15 !== null) {
                var result11 = [result12, result13, result14, result15];
              } else {
                var result11 = null;
                pos = savedPos2;
              }
            } else {
              var result11 = null;
              pos = savedPos2;
            }
          } else {
            var result11 = null;
            pos = savedPos2;
          }
        } else {
          var result11 = null;
          pos = savedPos2;
        }
        if (result11 !== null) {
          var result0 = result11;
        } else {
          var savedPos0 = pos;
          if (input.substr(pos, 1) === "\"") {
            var result3 = "\"";
            pos += 1;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\"\\\"\"");
            }
          }
          if (result3 !== null) {
            var result4 = parse_Name();
            if (result4 !== null) {
              var savedPos1 = pos;
              var result9 = parse___();
              if (result9 !== null) {
                var result10 = parse_Name();
                if (result10 !== null) {
                  var result8 = [result9, result10];
                } else {
                  var result8 = null;
                  pos = savedPos1;
                }
              } else {
                var result8 = null;
                pos = savedPos1;
              }
              var result7 = result8 !== null
                ? (function(t) {return " "+t})(result8[1])
                : null;
              if (result7 !== null) {
                var result5 = [];
                while (result7 !== null) {
                  result5.push(result7);
                  var savedPos1 = pos;
                  var result9 = parse___();
                  if (result9 !== null) {
                    var result10 = parse_Name();
                    if (result10 !== null) {
                      var result8 = [result9, result10];
                    } else {
                      var result8 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result8 = null;
                    pos = savedPos1;
                  }
                  var result7 = result8 !== null
                    ? (function(t) {return " "+t})(result8[1])
                    : null;
                }
              } else {
                var result5 = null;
              }
              if (result5 !== null) {
                if (input.substr(pos, 1) === "\"") {
                  var result6 = "\"";
                  pos += 1;
                } else {
                  var result6 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"\\\"\"");
                  }
                }
                if (result6 !== null) {
                  var result2 = [result3, result4, result5, result6];
                } else {
                  var result2 = null;
                  pos = savedPos0;
                }
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
          } else {
            var result2 = null;
            pos = savedPos0;
          }
          var result1 = result2 !== null
            ? (function(f, s) {return f+s.join('')})(result2[1], result2[2])
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Name() {
        var cacheKey = 'Name@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[A-Za-z]/) !== null) {
          var result2 = input.charAt(pos);
          pos++;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("[A-Za-z]");
          }
        }
        if (result2 !== null) {
          var result3 = [];
          if (input.substr(pos).match(/^[A-Za-z0-9]/) !== null) {
            var result4 = input.charAt(pos);
            pos++;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("[A-Za-z0-9]");
            }
          }
          while (result4 !== null) {
            result3.push(result4);
            if (input.substr(pos).match(/^[A-Za-z0-9]/) !== null) {
              var result4 = input.charAt(pos);
              pos++;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("[A-Za-z0-9]");
              }
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(c, d) {return c+d.join('')})(result1[0], result1[1])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("Name");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse__() {
        var cacheKey = '_@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result0 = [];
        if (input.substr(pos).match(/^[ \n\r]/) !== null) {
          var result1 = input.charAt(pos);
          pos++;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("[ \\n\\r]");
          }
        }
        while (result1 !== null) {
          result0.push(result1);
          if (input.substr(pos).match(/^[ \n\r]/) !== null) {
            var result1 = input.charAt(pos);
            pos++;
          } else {
            var result1 = null;
            if (reportMatchFailures) {
              matchFailed("[ \\n\\r]");
            }
          }
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("WS");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse___() {
        var cacheKey = '__@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        if (input.substr(pos).match(/^[ \n\r]/) !== null) {
          var result1 = input.charAt(pos);
          pos++;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("[ \\n\\r]");
          }
        }
        if (result1 !== null) {
          var result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (input.substr(pos).match(/^[ \n\r]/) !== null) {
              var result1 = input.charAt(pos);
              pos++;
            } else {
              var result1 = null;
              if (reportMatchFailures) {
                matchFailed("[ \\n\\r]");
              }
            }
          }
        } else {
          var result0 = null;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("WS");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          failuresExpected.sort();
          
          var lastFailure = null;
          var failuresExpectedUnique = [];
          for (var i = 0; i < failuresExpected.length; i++) {
            if (failuresExpected[i] !== lastFailure) {
              failuresExpectedUnique.push(failuresExpected[i]);
              lastFailure = failuresExpected[i];
            }
          }
          
          switch (failuresExpectedUnique.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpectedUnique[0];
            default:
              return failuresExpectedUnique.slice(0, failuresExpectedUnique.length - 1).join(', ')
                + ' or '
                + failuresExpectedUnique[failuresExpectedUnique.length - 1];
          }
        }
        
        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quote(input.charAt(actualPos))
          : 'end of input';
        
        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      
		var laxParsing = (typeof contextParserConfig === 'undefined' ? true: contextParserConfig.laxParsing);
      
		var failOnCursor = (typeof contextParserConfig === 'undefined' ? false: contextParserConfig.failOnCursor);
      
		
      
		var primitives = [];
      
		var cursor;
      
	
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column,
          rightmostMatchFailuresPos,
          rightmostMatchFailuresExpected
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(message, line, column, position, expectations) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
    this.position = position;
    this.expectations = expectations;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();